//定数定義
const target = document.getElementById('js-target');
const input = document.getElementById('js-input');
const result_title = document.getElementById('js-result-title');
const result_time = document.getElementById('js-result-time');
const result_rate = document.getElementById('js-result-rate');
const result_repeat = document.getElementById('js-result-repeat');
const result_twitter = document.getElementById('js-result-twitter');
const result_answer = document.getElementById('js-result-answer');
const result_lesson_list = document.getElementById('js-result-lesson-list');
const result_mypage = document.getElementById('js-result-mypage');
const result_login = document.getElementById('js-result-login');
const progress = document.getElementById('js-progress-bar');
//BackSpace + Ctrl + Space以外の不要キーを無効
const ignore_keys = ['F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'Tab', 'Enter', 'Shift', 'Alt', 'PauseBreak', 'CapsLock', 'Esc', 'PageUp', 'PageDown', 'End', 'Home', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Insert', 'Delete', 'NumLock', 'ScrollLock', 'Dead', 'Meta', 'Escape'];
//gon取得
const questions = [];
const answers = [];
for (let i = 0; i < gon.commands.length; i++) { questions.push(gon.commands[`${i}`].question) };
for (let i = 0; i < gon.commands.length; i++) { answers.push(gon.commands[`${i}`].answer_key) };
const total_questions = questions.length
const user_login_flag = gon.user_login_flag

//変数定義
let enter_key = "";
let playing = false;
let starttime;
let answer_count = 0;
let progress_percent = 0;
let progress_timer;

//プログレスバー処理
const progress_bar = function() {
  if (progress_percent < 100) {
    progress_percent ++;
    progress.style.width = String(progress_percent) + "%";
  }
  if (progress_percent === 100 && questions.length === 0) {
    end_lesson();
  } else if (progress_percent === 100) {
    set_question();
  }
}

//問題定義
function set_question() {
  clearInterval(progress_timer);
  input_init()
  question = String(questions.splice(0, 1));
  answer = String(answers.splice(0, 1));
  target.textContent = question;
  progress_percent = 0;
  progress_timer = setInterval(progress_bar, 100);
}

//入力内容初期化
function input_init() {
  target.textContent = "";
  input.textContent = "";
  enter_key = "";
}

//ajax用CSRFトークン設定
function set_csrftoken() {
  $.ajaxPrefilter(function (options, originalOptions, jqXHR) {
    if (!options.crossDomain) {
      const token = $('meta[name="csrf-token"]').attr('content');
      if (token) {
        return jqXHR.setRequestHeader('X-CSRF-Token', token);
      }
    }
  });
}

//終了処理
function end_lesson() {
  input_init();
  clearInterval(progress_timer);
  progress.remove();
  const cleartime = Math.round((Date.now() - starttime) / 1000)
  const answer_rate = Math.round(answer_count / total_questions * 100)
  result_title.textContent = '終了しました!';
  result_time.textContent = `クリアタイム: ${cleartime}秒`;
  result_rate.textContent = `正答率: ${answer_rate}%`;
  //Twitterシェア結果埋め込み
  result_twitter.href = result_twitter.href.replace('cleartime', String(cleartime)).replace('answer_rate', String(answer_rate));
  result_twitter.classList.remove('d-none');
  result_repeat.classList.remove('d-none');
  result_lesson_list.classList.remove('d-none');
  result_answer.classList.remove('d-none');
  set_csrftoken();
  //ログインしている場合はDB格納
  const lesson_name = location.pathname.replace('/lessons/', '');
  if (user_login_flag === false) {
    result_login.classList.remove('d-none');
    return;
  }
  $.ajax({
    url: '/user_lessons',
    type: 'POST',
    data: {
      user_lesson: {
        //Controllerでlesson_nameをlesson_idに変換
        lesson_id: lesson_name,
        time: cleartime,
        answer_rate: answer_rate
      }
    },
    dataType: 'json'
  }).done(function() {
    result_mypage.classList.remove('d-none');
  });
}

function flash_next() {
  toastr.options = {
  "closeButton": false,
  "debug": false,
  "newestOnTop": false,
  "progressBar": false,
  "positionClass": "toast-top-right",
  "preventDuplicates": false,
  "onclick": null,
  "showDuration": "400",
  "hideDuration": "400",
  "timeOut": "1000",
  "extendedTimeOut": "0",
  "showEasing": "swing",
  "hideEasing": "linear",
  "showMethod": "fadeIn",
  "hideMethod": "fadeOut"
  }

  Command: toastr["success"]("Next")
}

function flash_warn() {
  toastr.options = {
    "closeButton": false,
    "debug": false,
    "newestOnTop": false,
    "progressBar": false,
    "positionClass": "toast-top-right",
    "preventDuplicates": false,
    "onclick": null,
    "showDuration": "400",
    "hideDuration": "400",
    "timeOut": "2500",
    "extendedTimeOut": "0",
    "showEasing": "swing",
    "hideEasing": "linear",
    "showMethod": "fadeIn",
    "hideMethod": "fadeOut"
  }
  Command: toastr["warning"]("解答のみ入力してください。<br>入力はBackspaceで削除できます。")
}

document.addEventListener('keydown', e => {
  if (e.key === ' ' && playing === true || e.key !== ' ' && playing === false || ignore_keys.includes(e.key) || result_title.textContent.length > 0) {
    return;
  } else if (e.key === ' ' && playing === false) {
    //レッスン開始処理
    playing = true;
    starttime = Date.now();
    $('small').remove();
    set_question();
  } else if (e.key === 'Backspace') {
    //バックスペース処理
  	enter_key = enter_key.slice(0, -1);
  } else if (e.key === 'Control') {
    //コントロールキー処理
  	enter_key += 'Ctrl+';
  } else {
    //入力内容追加
  	enter_key += e.key;
  }
  //10文字以上は入力させない
  if (enter_key.length > 10) {
    enter_key = "";
    flash_warn();
  }
  input.textContent = enter_key;
  if (enter_key === answer) {
    flash_next();
    answer_count ++
    if (questions.length === 0) {
      end_lesson();
      return;
    }
    set_question();
  }
})
